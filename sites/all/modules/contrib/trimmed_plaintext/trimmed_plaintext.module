<?php

/* 
 * Author: Jordan from Digibits.org
 * Most of this code is just stolen from the text module. 
 * For my project I needed the ability to display plaintext teasers, but I also needed them trimmed.
 */

/**
 * Implements hook_field_formatter_info().
 */
function trimmed_plaintext_field_formatter_info() {
  return array(
    'text_plain_trimmed' => array(
      'label' => t('Plain text trimmed'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('trim_length' => 600),
    ),
    'text_plain_summary_or_trimmed' => array(
      'label' => t('Plain text summary or trimmed'),
      'field types' => array('text_with_summary'),
      'settings' => array('trim_length' => 600),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function trimmed_plaintext_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'text_plain_trimmed':
      foreach ($items as $delta => $item) {
        $output = preg_replace('/\s\s+/', ' ', strip_tags(_text_sanitize($instance, $langcode, $item, 'value')));
        $output = trim(text_summary($output, $instance['settings']['text_processing'] ? $item['format'] : NULL, $display['settings']['trim_length']));
        $element[$delta] = array('#markup' => $output, '#prefix' => '<p>', '#suffix' => '</p>');
      }
      break;

    case 'text_plain_summary_or_trimmed':
      foreach ($items as $delta => $item) {
        if (!empty($item['summary'])) {
          $output = trim(preg_replace('/\s\s+/', ' ', strip_tags(_text_sanitize($instance, $langcode, $item, 'summary'))));
        }
        else {
          if(strpos($item['value'], '<!--break-->')) {
            // if there's a break, we need to summarize text before stripping html tags (like <!--break-->)
            // Currently filtered_html removes <!--break-->, this is resolved by this patch
            // http://drupal.org/node/881006
            $output = _text_sanitize($instance, $langcode, $item, 'value');
            $output = text_summary($output, $instance['settings']['text_processing'] ? $item['format'] : NULL, $display['settings']['trim_length']);
            $output = trim(preg_replace('/\s\s+/', ' ',  strip_tags($output)));
          }
          else {
            $output = preg_replace('/\s\s+/', ' ',  strip_tags(_text_sanitize($instance, $langcode, $item, 'value')));
            $output = trim(text_summary($output, $instance['settings']['text_processing'] ? $item['format'] : NULL, $display['settings']['trim_length']));
          }
        }
        $element[$delta] = array('#markup' => $output, '#prefix' => '<p>', '#suffix' => '</p>');
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function trimmed_plaintext_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function trimmed_plaintext_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $summary = t('Trim length') . ': ' . $settings['trim_length'];
  }

  return $summary;
}

